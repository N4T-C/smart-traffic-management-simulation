fix this error which come up that os "no module named pandas"....check the whole thing again beacuse we need the prediction to work so badly and the prediction to be applied to the respective traffic signal so it can show the respective green or red light according to the prediction

and the accidents happening are waay too chaotic here, since in this simulation the traffic timer is only 5 seconds the span is small so when the accident event happens it should be cleared off in 0.4 seconds so traffic (other cars) can move freely.

also update the README file so it must include all the programming languages and modules used up to date in the application and alos update the ABOUT.md with the Novalties of the project/application and also the Novalties that can be implemented with the application in the future with iot too..

do the prompt i pasted too

Pasted--I-have-a-traffic-management-simulator-for-a-four-way-intersection-Currently-cars-only-move-strai-1758689254342_1758689254343.txt
*“I have a traffic management simulator for a four-way intersection. Currently, cars only move straight, for example, from the south road to the north road. Upgrade the system with the following features:
	1.	Vehicle Movements: Support twelve possible directions of travel:
	•	From the North road: North to South, North to East, North to West
	•	From the East road: East to West, East to North, East to South
	•	From the South road: South to North, South to West, South to East
	•	From the West road: West to East, West to South, West to North
	2.	Conflict Matrix: Define which vehicle movements can run together safely. For example, vehicles going from the North to South conflict with vehicles going from South to North, and left turns conflict with opposing straight movements.
	3.	Traffic Light Phases: Group non-conflicting vehicle movements into traffic light phases. For example, North to South and South to North can run together as one phase, East to West and West to East as another phase. Include dedicated protected left-turn phases, such as North to West only.
	4.	Scheduling Algorithms:
	•	Round Robin: cycle through all phases in order
	•	Priority Scheduling: select the next phase based on the queue length and presence of emergency vehicles
	•	Shortest Job First: pick the phase with the shortest total clearance time, calculated as the number of vehicles multiplied by the average time per vehicle
	5.	Emergency Vehicle Handling: Detect emergency vehicles in the queues. Immediately preempt the current phase with an all-red interval and serve the emergency movement first.
	6.	Safety Rules: Never allow conflicting green lights. Always insert a short all-red interval when switching between phases.
	7.	Visualization:
	•	Highlight the currently active phase and the movements that are allowed during that phase
	•	Display queue lengths for each direction
	•	Indicate when emergency vehicles override the normal sequence
	•	Include a Python visualization suite:
	•	Line chart using Seaborn to show queue length over time for each lane, with different colors and markers
	•	Bar chart using Matplotlib/Seaborn for average waiting time per lane
	•	Heatmap using Seaborn to visualize vehicle movement demand across all lanes and times
	•	Optionally, a live dashboard using Plotly Dash or Streamlit to show real-time intersection status, including highlighted lanes, queue counters, and emergency vehicle indicators
	8.	Testing Scenarios: Include tests for balanced traffic, high turning demand, multiple emergency vehicles at once, and fairness to prevent starvation of smaller roads.